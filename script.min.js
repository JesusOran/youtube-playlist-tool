class YouTubePlaylist{constructor(){this.apiKey="",this.playlistUrl="",this.availableVideoIds=[],this.unavailableVideoIds=[],this.apiCallCount=0}async fetchVideoIds(){try{this.disableButtons();const t=this.extractPlaylistId(this.playlistUrl);let e="";for(this.availableVideoIds=[],this.unavailableVideoIds=[];void 0!==e;){const a=await this.makeApiCall(`https://www.googleapis.com/youtube/v3/playlistItems?part=contentDetails,status&maxResults=50&playlistId=${t}&key=${this.apiKey}&pageToken=${e}`);if(!a.ok)throw new Error(`Error: ${a.statusText}`);const l=await a.json();l.items&&l.items.forEach(t=>{"private"===t.status.privacyStatus||"unlisted"===t.status.privacyStatus||"public"===t.status.privacyStatus?this.availableVideoIds.push(t.contentDetails.videoId):this.unavailableVideoIds.push(t.contentDetails.videoId),this.updateOutputTextarea(`Available Video IDs: ${JSON.stringify(this.availableVideoIds,null,2)}\nUnavailable Video IDs: ${JSON.stringify(this.unavailableVideoIds,null,2)}`)}),e=l.nextPageToken}console.log("Available Video IDs:",this.availableVideoIds),console.log("Unavailable Video IDs:",this.unavailableVideoIds)}catch(t){this.updateOutputTextarea(`Error fetching video IDs: ${t.message}`),console.error("Error fetching video IDs:",t)}finally{this.enableButtons()}}async fetchVideoDurations(){try{this.disableButtons(),0===this.availableVideoIds.length&&await this.fetchVideoIds();let t=[];const e=50,a=this.chunkArray(this.availableVideoIds,e);let l=0;for(const e of a){const a=await this.makeApiCall(`https://www.googleapis.com/youtube/v3/videos?part=contentDetails&id=${e.join(",")}&key=${this.apiKey}`);if(!a.ok)throw new Error(`Error: ${a.statusText}`);const i=await a.json();i.items&&i.items.forEach(e=>{let a=this.convertISO8601ToSeconds(e.contentDetails.duration);a=this.adjustDuration(a),t.push({videoId:e.id,startTime:l,endTime:l+a}),l+=a,this.updateOutputTextarea(JSON.stringify(t,null,2))})}return console.log(t),t}catch(t){this.updateOutputTextarea(`Error fetching video durations: ${t.message}`),console.error("Error fetching video durations:",t)}finally{this.enableButtons()}}adjustDuration(t){const e=Math.max(0,t-1),a=t+1;return Math.round((e+a)/2)}extractPlaylistId(t){const e=new URLSearchParams(new URL(t).search);return e.get("list")}chunkArray(t,e){const a=[];for(let l=0;l<t.length;l+=e)a.push(t.slice(l,l+e));return a}convertISO8601ToSeconds(t){const e=/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/,a=e.exec(t),l=parseInt(a[1]||0,10),i=parseInt(a[2]||0,10),s=parseInt(a[3]||0,10);return 3600*l+60*i+s}shuffleArray(t){for(let e=t.length-1;e>0;e--){const a=Math.floor(Math.random()*(e+1));[t[e],t[a]]=[t[a],t[e]]}return t}createMasterPlaylist(t){const e=[];let a=[],l=0;const i=43200;for(const s of t)l+(s.endTime-s.startTime)>i&&(e.push(a),a=[],l=0),a.push({videoId:s.videoId,startTime:0===a.length?0:l,endTime:0===a.length?s.endTime-s.startTime:l+(s.endTime-s.startTime)}),l+=s.endTime-s.startTime;a.length>0&&e.push(a);const s=Math.floor(e.reduce((t,e)=>t+e.length,0)/e.length),o=e[e.length-1];if(o.length<s){const t=e.slice(0,-1).flat();for(;o.length<s&&t.length>0;){const e=Math.floor(Math.random()*t.length),a=t.splice(e,1)[0],l=o[o.length-1].endTime;o.push({videoId:a.videoId,startTime:l,endTime:l+(a.endTime-a.startTime)})}}return console.log(e),e}updateOutputTextarea(t){outputTextarea.value=t,outputTextarea.scrollTop=outputTextarea.scrollHeight}setApiKeyAndPlaylistUrl(t,e){this.apiKey=t,this.playlistUrl=e}validateInputs(){return!(!this.apiKey||!this.playlistUrl)||(alert("Both API key and Playlist URL are required."),!1)}async makeApiCall(t){return this.apiCallCount++,this.updateApiCallCount(),fetch(t)}updateApiCallCount(){const t=document.getElementById("apiCallCount");t.textContent=this.apiCallCount}disableButtons(){getIdsButton.disabled=!0,getTimesButton.disabled=!0,masterButton.disabled=!0}enableButtons(){getIdsButton.disabled=!1,getTimesButton.disabled=!1,masterButton.disabled=!1}}const ytPlaylist=new YouTubePlaylist,getIdsButton=document.getElementById("all-ids"),getTimesButton=document.getElementById("all-times"),masterButton=document.getElementById("masterPlaylist"),outputTextarea=document.getElementById("output"),copyTextButton=document.getElementById("copyText"),downloadFileButton=document.getElementById("downloadFile"),apiKeyInput=document.getElementById("apiKey"),playlistUrlInput=document.getElementById("playlistUrl");getIdsButton.addEventListener("click",async()=>{outputTextarea.value="",ytPlaylist.setApiKeyAndPlaylistUrl(apiKeyInput.value,playlistUrlInput.value),ytPlaylist.validateInputs()&&await ytPlaylist.fetchVideoIds()}),getTimesButton.addEventListener("click",async()=>{if(outputTextarea.value="",ytPlaylist.setApiKeyAndPlaylistUrl(apiKeyInput.value,playlistUrlInput.value),ytPlaylist.validateInputs()){const t=await ytPlaylist.fetchVideoDurations();outputTextarea.value=JSON.stringify(t,null,2),outputTextarea.scrollTop=outputTextarea.scrollHeight}}),masterButton.addEventListener("click",async()=>{if(outputTextarea.value="",ytPlaylist.setApiKeyAndPlaylistUrl(apiKeyInput.value,playlistUrlInput.value),ytPlaylist.validateInputs()){const t=await ytPlaylist.fetchVideoDurations(),e=ytPlaylist.shuffleArray(t),a=ytPlaylist.createMasterPlaylist(e);outputTextarea.value=JSON.stringify(a,null,2),outputTextarea.scrollTop=outputTextarea.scrollHeight}}),copyTextButton.addEventListener("click",()=>{navigator.clipboard.writeText(outputTextarea.value).then(()=>{alert("Text copied to clipboard!")}).catch(t=>{alert("Failed to copy text: ",t)})}),downloadFileButton.addEventListener("click",()=>{const t=new Blob([`export const masterPlaylist = ${outputTextarea.value};`],{type:"application/javascript"}),e=URL.createObjectURL(t),a=document.createElement("a");a.href=e,a.download="masterPlaylist.js",document.body.appendChild(a),a.click(),document.body.removeChild(a)});